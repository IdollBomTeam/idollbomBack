버전 관리 시스템
	원하는 시점으로 이동할 수 있으며 각 버전 별로 여러 개발자가 협업할 수 있는 최적의 환경을 제공하는 시스템

Git
	서버뿐만 아니라 로컬에서도 버전 관리가 가능하며 로컬이 서버가 될 수 있고 서버도 로컬이 될 수 있다.
	브랜치라는 개념을 사용하여 개발자 마음대로 로컬 환경에서도 커밋과 버전 관리가 가능하다.

Git-Hub (공유 서버)
	Git으로 관리하는 프로젝트를 호스팅 할 수 있는 사이트 중 하나이다.
	로컬 저장소에서 작업하던 파일을 다른 클라이언트와 공유하기 위한 서버이다.

Git의 기본구조
	작업 폴더 -> 스테이징 영역 -> 저장소(repository)

	1. 작업 폴더를 깃에서 관리하도록 설정한다.
	2. 수정된 부분이 있다면 스테이징 영역으로 추가할 수 있다.
	3. 수정된 부분에서 원하는 부분만 따로 스테이징하여 관리할 수 있다.
	4. 스테이징 영역에서 최종 검토 이후 저장소로 업데이트하는 커밋을 진행할 수 있다.

명령어
	git config --global user.name "닉네임"
	git config --global user.email "이메일"
	git config --list 에서 확인

	*나중에 push할 때 다른 계정으로 로그인 되어있다면 자격 증명 관리자로 들어가서 github관련 모든 것 제거

	git init --> 깃 폴더로 사용
	git branch -m master main -> master 이름을 main으로 변경
	git remote add origin 원격저장소 url -> github에서 레포지트리 만든 후 복사 붙여넣기
	git pull origin main -> 원격저장소에 저장된 친구들 가져오기

	git status -> 현재 작업 공간 상태 확인
	git add . -> 전체 수정 및 추가 및 삭제 상태 스테이징
	git commit -m "메세지" -> 로컬 저장소에 저장
	git push origin main -> 원격저장소에 로컬 저장소에 있는 내용들 반영

기타 명령어
	git remote -v : 현재 연결된 원격 저장소 확인
	git clone 원격저장소 url : 원격 저장소의 파일을 복사하여 그대로 로컬 저장소로 가져오는 명령어
		- git init X 
	
	git fork
		clone과 살짝 다름 차이점 알고 있으면 좋을듯